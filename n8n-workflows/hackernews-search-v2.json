{
  "name": "IdeaForge - HackerNews Search V2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ideaforge/hackernews-search",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "9422046f-fee5-481a-8e42-975d3900cf9a",
      "name": "Webhook",
      "webhookId": "4589dfe7-8160-4ec8-a401-b8e5760dc1b7"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Enhanced request validation with comprehensive error handling (5.3.7)\nconst method = $json.method || 'POST';\nconst headers = $json.headers || {};\nconst body = $json.body || {};\n\n// Handle OPTIONS preflight request\nif (method === 'OPTIONS') {\n  return {\n    statusCode: 200,\n    body: { message: 'OK' },\n    preflight: true\n  };\n}\n\n// Check API key authentication (only for non-OPTIONS requests)\nconst apiKey = headers['x-api-key'];\nconst validApiKey = 'local-dev-api-key-12345';\n\nif (!apiKey) {\n  throw new Error('AUTH_ERROR: Missing API key. Please provide X-API-Key header');\n}\n\nif (apiKey !== validApiKey) {\n  throw new Error('AUTH_ERROR: Invalid API key');\n}\n\n// Validate required fields\nif (!body.query && body.query !== '') {\n  throw new Error('VALIDATION_ERROR: Missing required field: query');\n}\n\nif (!body.sessionId) {\n  throw new Error('VALIDATION_ERROR: Missing required field: sessionId');\n}\n\n// Handle edge cases for query\nlet query = body.query;\n\n// Check if query is a string\nif (typeof query !== 'string') {\n  throw new Error('VALIDATION_ERROR: Query must be a string');\n}\n\n// Trim and check length\nquery = query.trim();\n\n// Handle empty query after trimming\nif (query.length === 0) {\n  throw new Error('VALIDATION_ERROR: Query cannot be empty or whitespace only');\n}\n\n// Check for special characters only\nif (/^[^a-zA-Z0-9]+$/.test(query)) {\n  // Allow some common programming symbols\n  const allowedSymbols = ['c++', 'c#', 'f#', '.net', 'node.js'];\n  const queryLower = query.toLowerCase();\n  \n  if (!allowedSymbols.some(symbol => queryLower.includes(symbol))) {\n    throw new Error('VALIDATION_ERROR: Query must contain at least one alphanumeric character');\n  }\n}\n\n// Sanitize query (max 200 chars)\nif (query.length > 200) {\n  console.log(`Query truncated from ${query.length} to 200 characters`);\n  query = query.substring(0, 200);\n}\n\n// Validate sessionId format\nif (typeof body.sessionId !== 'string' || body.sessionId.length === 0) {\n  throw new Error('VALIDATION_ERROR: SessionId must be a non-empty string');\n}\n\n// Validate options if provided\nif (body.options && typeof body.options !== 'object') {\n  throw new Error('VALIDATION_ERROR: Options must be an object');\n}\n\n// Add timestamp and auth info\nbody.query = query;\nbody.processedAt = new Date().toISOString();\nbody.authenticated = true;\nbody.startTime = Date.now();\n\n// Return the validated data\nreturn body;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "618b18cb-5ba6-4a23-afa5-13f6ea750889",
      "name": "Validate Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Configure Algolia API parameters (5.3.2)\nconst query = $json.query;\nconst options = $json.options || {};\n\n// Date range handling\nconst dateRanges = {\n  'last_24h': Math.floor(Date.now() / 1000) - 86400,\n  'last_week': Math.floor(Date.now() / 1000) - 604800,\n  'last_month': Math.floor(Date.now() / 1000) - 2592000,\n  'last_year': Math.floor(Date.now() / 1000) - 31536000,\n  'all': 0\n};\n\nconst numericFilters = [];\nif (options.dateRange && dateRanges[options.dateRange]) {\n  numericFilters.push(`created_at_i>${dateRanges[options.dateRange]}`);\n}\n\n// Points threshold for quality filtering\nif (options.minPoints) {\n  numericFilters.push(`points>=${options.minPoints}`);\n}\n\n// Build search parameters\nconst searchParams = {\n  query: query,\n  tags: options.tags || 'story,comment',\n  hitsPerPage: Math.min(options.limit || 30, 100),\n  page: options.page || 0,\n  attributesToRetrieve: [\n    'title',\n    'url',\n    'author',\n    'points',\n    'story_title',\n    'comment_text',\n    'story_text',\n    'num_comments',\n    'created_at',\n    'created_at_i',\n    'objectID',\n    '_tags',\n    'story_id',\n    'parent_id'\n  ].join(','),\n  attributesToHighlight: ['title', 'story_title', 'comment_text'].join(','),\n  highlightPreTag: '<mark>',\n  highlightPostTag: '</mark>'\n};\n\n// Add numeric filters if any\nif (numericFilters.length > 0) {\n  searchParams.numericFilters = numericFilters.join(',');\n}\n\n// Handle sorting\nif (options.sortBy === 'date') {\n  searchParams.tags = `${searchParams.tags},sort_by_date`;\n}\n\n// Pass through session and timing info\nconst output = {\n  searchParams,\n  originalQuery: query,\n  sessionId: $json.sessionId,\n  startTime: $json.startTime,\n  options: options\n};\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "7f8d9e2c-3a4b-4e56-9b78-1234567890ab",
      "name": "Configure Search Parameters"
    },
    {
      "parameters": {
        "url": "https://hn.algolia.com/api/v1/search",
        "method": "GET",
        "queryParametersUi": {
          "parameter": [
            {
              "name": "={{Object.keys($json.searchParams)[0]}}",
              "value": "={{Object.values($json.searchParams)[0]}}"
            }
          ]
        },
        "queryParametersJson": "={{ JSON.stringify($json.searchParams) }}",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        660,
        0
      ],
      "id": "8a9b0c1d-2e3f-4a5b-6c7d-234567890abc",
      "name": "Search HackerNews API"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse and transform HN API response with comprehensive error handling (5.3.3, 5.3.4 & 5.3.7)\nconst response = $json;\nconst originalData = $node[\"Configure Search Parameters\"].json;\n\n// Comprehensive error handling for various HTTP status codes\nif (response.statusCode === 429) {\n  // Rate limited\n  const retryAfter = response.headers?.['retry-after'] || '60';\n  const error = {\n    status: 'rate_limited',\n    error: 'HackerNews API rate limit exceeded',\n    retryAfter: parseInt(retryAfter),\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'RATE_LIMIT_ERROR',\n      rateLimitReset: new Date(Date.now() + parseInt(retryAfter) * 1000).toISOString()\n    }\n  };\n  return error;\n}\n\nif (response.statusCode === 503) {\n  // Service unavailable\n  return {\n    status: 'error',\n    error: 'HackerNews API is temporarily unavailable',\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'SERVICE_UNAVAILABLE',\n      retryable: true\n    }\n  };\n}\n\nif (response.statusCode >= 500) {\n  // Server error\n  return {\n    status: 'error',\n    error: `HackerNews API server error (${response.statusCode})`,\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'SERVER_ERROR',\n      statusCode: response.statusCode,\n      retryable: true\n    }\n  };\n}\n\nif (response.statusCode === 404) {\n  // Not found - API endpoint changed?\n  return {\n    status: 'error',\n    error: 'HackerNews API endpoint not found',\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'NOT_FOUND',\n      statusCode: 404\n    }\n  };\n}\n\nif (response.statusCode !== 200) {\n  // Other non-200 status\n  return {\n    status: 'error',\n    error: `Unexpected status code: ${response.statusCode}`,\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'UNEXPECTED_STATUS',\n      statusCode: response.statusCode,\n      responseBody: response.body\n    }\n  };\n}\n\n// Check if we have a valid response body\nif (!response.body || typeof response.body !== 'object') {\n  return {\n    status: 'error',\n    error: 'Invalid response format from HackerNews API',\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'INVALID_RESPONSE_FORMAT'\n    }\n  };\n}\n\nconst apiResponse = response.body;\n\n// Validate API response structure\nif (!Array.isArray(apiResponse.hits)) {\n  return {\n    status: 'error',\n    error: 'Invalid API response: missing hits array',\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      errorCode: 'INVALID_API_RESPONSE'\n    }\n  };\n}\n\nconst hits = apiResponse.hits;\n\n// Handle empty results as success (not an error)\nif (hits.length === 0) {\n  return {\n    status: 'success',\n    data: [],\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - originalData.startTime,\n      timestamp: new Date().toISOString(),\n      sessionId: originalData.sessionId,\n      query: originalData.originalQuery,\n      totalHits: 0,\n      returnedHits: 0,\n      algoliaProcessingTime: apiResponse.processingTimeMS || 0,\n      message: 'No results found for the given query'\n    }\n  };\n}\n\n// Helper function to clean HTML\nfunction cleanHtml(text) {\n  if (!text) return '';\n  try {\n    return text\n      .replace(/<[^>]*>/g, '') // Remove HTML tags\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&quot;/g, '\"')\n      .replace(/&#x27;/g, \"'\")\n      .replace(/&#x2F;/g, '/')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  } catch (e) {\n    console.error('Error cleaning HTML:', e);\n    return text; // Return original if cleaning fails\n  }\n}\n\n// Helper function to extract content based on hit type\nfunction extractContent(hit) {\n  let content = '';\n  let title = '';\n  let type = 'unknown';\n  \n  try {\n    if (hit._tags && hit._tags.includes('story')) {\n      type = 'story';\n      title = hit.title || '';\n      content = hit.story_text || hit.title || '';\n    } else if (hit._tags && hit._tags.includes('comment')) {\n      type = 'comment';\n      title = hit.story_title || 'Comment';\n      content = hit.comment_text || '';\n    } else if (hit._tags && hit._tags.includes('poll')) {\n      type = 'poll';\n      title = hit.title || '';\n      content = hit.title || '';\n    }\n  } catch (e) {\n    console.error('Error extracting content:', e);\n  }\n  \n  return {\n    type,\n    title: cleanHtml(title),\n    content: cleanHtml(content)\n  };\n}\n\n// Enhanced relevance scoring function (5.3.4)\nfunction calculateRelevanceScore(hit, query, extracted) {\n  let score = 0;\n  \n  try {\n    const queryLower = query.toLowerCase();\n    const queryTerms = queryLower.split(/\\s+/).filter(term => term.length > 0);\n    \n    // Base score from HN metrics\n    const points = hit.points || 0;\n    const comments = hit.num_comments || 0;\n    score += points + (comments * 2); // Comments weighted higher\n    \n    // Title relevance (highest weight)\n    const titleLower = extracted.title.toLowerCase();\n    queryTerms.forEach(term => {\n      if (titleLower.includes(term)) {\n        score += 50; // Exact match in title\n        if (titleLower.startsWith(term)) {\n          score += 25; // Bonus for starting with term\n        }\n      }\n    });\n    \n    // Content relevance\n    const contentLower = extracted.content.toLowerCase();\n    queryTerms.forEach(term => {\n      try {\n        const regex = new RegExp('\\\\b' + term.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\b', 'gi');\n        const occurrences = (contentLower.match(regex) || []).length;\n        score += occurrences * 5; // 5 points per occurrence\n      } catch (e) {\n        // Regex failed, try simple includes\n        if (contentLower.includes(term)) {\n          score += 5;\n        }\n      }\n    });\n    \n    // Author reputation\n    const trustedAuthors = ['pg', 'dang', 'patio11', 'tptacek', 'jedberg', 'antirez', 'jl', 'steveklabnik'];\n    if (hit.author && trustedAuthors.includes(hit.author)) {\n      score += 100;\n    }\n    \n    // Recency factor (with decay)\n    try {\n      const createdAt = new Date(hit.created_at);\n      if (!isNaN(createdAt.getTime())) {\n        const age = Math.floor((Date.now() - createdAt.getTime()) / 1000);\n        const ageInDays = age / 86400;\n        if (ageInDays < 7) {\n          score += 20;\n        } else if (ageInDays < 30) {\n          score += 10;\n        } else if (ageInDays < 365) {\n          score += 5;\n        } else {\n          score -= Math.floor(ageInDays / 365) * 10; // Penalty for very old content\n        }\n      }\n    } catch (e) {\n      console.error('Error calculating age:', e);\n    }\n    \n    // Type bonuses\n    if (extracted.type === 'story' && comments > 50) {\n      score += 30; // Popular discussion\n    }\n    if (extracted.type === 'comment' && points > 50) {\n      score += 40; // Highly valued comment\n    }\n    \n    // Technology-specific scoring\n    score += getTechnologyBonus(extracted, queryLower);\n    \n    // Negative factors\n    if (hit.dead || hit.deleted) {\n      score = -1000; // Filter out\n    }\n  } catch (e) {\n    console.error('Error calculating relevance score:', e);\n    // Return base score on error\n    score = (hit.points || 0) + ((hit.num_comments || 0) * 2);\n  }\n  \n  return Math.round(score);\n}\n\n// Technology-specific scoring patterns\nfunction getTechnologyBonus(extracted, query) {\n  let bonus = 0;\n  \n  try {\n    const content = `${extracted.title} ${extracted.content}`.toLowerCase();\n    \n    const techPatterns = {\n      javascript: {\n        positive: ['performance', 'typescript', 'node', 'npm', 'webpack', 'babel', 'react', 'vue'],\n        negative: ['deprecated', 'outdated', 'legacy', 'jquery', 'coffeescript'],\n        weight: 10\n      },\n      typescript: {\n        positive: ['types', 'interface', 'generic', 'strict', 'type-safe', 'inference'],\n        negative: ['any', 'javascript', 'untyped', 'migration'],\n        weight: 12\n      },\n      python: {\n        positive: ['pandas', 'numpy', 'django', 'flask', 'fastapi', 'poetry', 'pip', 'async'],\n        negative: ['python2', 'deprecated', 'legacy', 'outdated'],\n        weight: 10\n      },\n      react: {\n        positive: ['hooks', 'nextjs', 'gatsby', 'component', 'state', 'redux', 'jsx', 'functional'],\n        negative: ['class component', 'deprecated', 'angular', 'vue', 'outdated'],\n        weight: 15\n      },\n      golang: {\n        positive: ['goroutine', 'channel', 'performance', 'concurrent', 'docker', 'kubernetes'],\n        negative: ['slow', 'generic', 'verbose'],\n        weight: 10\n      },\n      rust: {\n        positive: ['memory safe', 'performance', 'ownership', 'cargo', 'async', 'tokio'],\n        negative: ['unsafe', 'complex', 'learning curve'],\n        weight: 12\n      }\n    };\n    \n    // Check each technology pattern\n    Object.entries(techPatterns).forEach(([tech, patterns]) => {\n      if (query.includes(tech) || content.includes(tech)) {\n        patterns.positive.forEach(term => {\n          if (content.includes(term)) {\n            bonus += patterns.weight;\n          }\n        });\n        \n        patterns.negative.forEach(term => {\n          if (content.includes(term)) {\n            bonus -= patterns.weight;\n          }\n        });\n      }\n    });\n  } catch (e) {\n    console.error('Error calculating technology bonus:', e);\n  }\n  \n  return bonus;\n}\n\n// Transform hits to ResearchResult format with enhanced scoring\nconst transformedResults = [];\nconst errors = [];\n\nhits.forEach((hit, index) => {\n  try {\n    // Validate hit structure\n    if (!hit || typeof hit !== 'object') {\n      errors.push({ index, error: 'Invalid hit object' });\n      return;\n    }\n    \n    const extracted = extractContent(hit);\n    \n    // Calculate age safely\n    let age = 0;\n    try {\n      const createdAt = new Date(hit.created_at);\n      if (!isNaN(createdAt.getTime())) {\n        age = Math.floor((Date.now() - createdAt.getTime()) / 1000);\n      }\n    } catch (e) {\n      console.error('Error calculating age for hit:', e);\n    }\n    \n    // Calculate enhanced relevance score\n    const relevanceScore = calculateRelevanceScore(hit, originalData.originalQuery, extracted);\n    \n    // Build the research result\n    const result = {\n      id: hit.objectID || `unknown-${index}`,\n      source: 'hackernews',\n      title: extracted.title || 'Untitled',\n      url: hit.url || `https://news.ycombinator.com/item?id=${hit.objectID}`,\n      content: (extracted.content || 'No content available').substring(0, 500),\n      score: relevanceScore,\n      metadata: {\n        type: extracted.type,\n        author: hit.author || 'unknown',\n        points: hit.points || 0,\n        numComments: hit.num_comments || 0,\n        createdAt: hit.created_at || new Date().toISOString(),\n        createdAtTimestamp: hit.created_at_i || Date.now() / 1000,\n        storyId: hit.story_id || hit.objectID,\n        parentId: hit.parent_id,\n        tags: hit._tags || [],\n        ageInSeconds: age,\n        highlights: hit._highlightResult,\n        queryRelevance: index + 1, // Position in search results\n        engagement: (hit.points || 0) + ((hit.num_comments || 0) * 2)\n      }\n    };\n    \n    transformedResults.push(result);\n  } catch (e) {\n    console.error(`Error processing hit at index ${index}:`, e);\n    errors.push({ index, error: e.message });\n  }\n});\n\n// Log any processing errors\nif (errors.length > 0) {\n  console.log(`Processing errors: ${errors.length} hits failed to process`);\n}\n\n// Filter out entries with negative scores or no content\nconst filteredResults = transformedResults.filter(result => \n  result.score > 0 && result.content && result.content !== 'No content available'\n);\n\n// Sort by relevance score descending\nfilteredResults.sort((a, b) => b.score - a.score);\n\n// Limit to configured number of results\nconst limitedResults = filteredResults.slice(0, originalData.options?.limit || 30);\n\n// Build the final response\nconst finalResponse = {\n  status: 'success',\n  data: limitedResults,\n  metadata: {\n    cached: false,\n    requestDuration: Date.now() - originalData.startTime,\n    timestamp: new Date().toISOString(),\n    sessionId: originalData.sessionId,\n    query: originalData.originalQuery,\n    totalHits: apiResponse.nbHits || 0,\n    returnedHits: limitedResults.length,\n    algoliaProcessingTime: apiResponse.processingTimeMS || 0,\n    scoring: {\n      method: 'enhanced_relevance',\n      totalScored: transformedResults.length,\n      filtered: transformedResults.length - filteredResults.length\n    },\n    processingErrors: errors.length > 0 ? errors.length : undefined\n  }\n};\n\nreturn finalResponse;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        0
      ],
      "id": "9b0c1d2e-3f4a-5b6c-7d8e-345678901bcd",
      "name": "Transform Response"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Enhanced error handling and response preparation (5.3.7)\ntry {\n  const data = $json;\n  \n  // Check if this is a preflight request\n  if (data.preflight) {\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, X-API-Key',\n        'Access-Control-Max-Age': '86400'\n      },\n      body: ''\n    };\n  }\n  \n  // Check if this is an error response\n  if (data.status === 'error' || data.status === 'rate_limited') {\n    // Determine appropriate HTTP status code\n    let statusCode = 500;\n    \n    if (data.metadata?.errorCode) {\n      switch (data.metadata.errorCode) {\n        case 'AUTH_ERROR':\n          statusCode = 401;\n          break;\n        case 'VALIDATION_ERROR':\n          statusCode = 400;\n          break;\n        case 'RATE_LIMIT_ERROR':\n          statusCode = 429;\n          break;\n        case 'NOT_FOUND':\n          statusCode = 404;\n          break;\n        case 'SERVICE_UNAVAILABLE':\n          statusCode = 503;\n          break;\n        default:\n          statusCode = 500;\n      }\n    }\n    \n    // For rate limiting, add retry-after header\n    const headers = {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    };\n    \n    if (data.status === 'rate_limited' && data.retryAfter) {\n      headers['Retry-After'] = String(data.retryAfter);\n      headers['X-RateLimit-Reset'] = data.metadata?.rateLimitReset || '';\n    }\n    \n    return {\n      statusCode,\n      headers,\n      body: JSON.stringify(data)\n    };\n  }\n  \n  // Normal success response\n  return data;\n  \n} catch (error) {\n  // Catch-all error handler\n  console.error('Error in response preparation:', error);\n  \n  // Try to extract error details\n  let errorMessage = 'Unknown error occurred';\n  let errorCode = 'UNKNOWN_ERROR';\n  \n  if (error instanceof Error) {\n    errorMessage = error.message;\n    \n    // Parse error code from message if present\n    const errorMatch = errorMessage.match(/^([A-Z_]+):\\s*(.+)$/);\n    if (errorMatch) {\n      errorCode = errorMatch[1];\n      errorMessage = errorMatch[2];\n    }\n  }\n  \n  // Build error response\n  const errorResponse = {\n    status: 'error',\n    error: errorMessage,\n    metadata: {\n      cached: false,\n      requestDuration: Date.now() - ($json.startTime || Date.now()),\n      timestamp: new Date().toISOString(),\n      sessionId: $json.sessionId || 'unknown',\n      errorCode: errorCode,\n      nodeError: true // Indicates error occurred in n8n node\n    }\n  };\n  \n  // Return appropriate status code based on error type\n  let statusCode = 500;\n  if (errorCode.includes('AUTH')) statusCode = 401;\n  else if (errorCode.includes('VALIDATION')) statusCode = 400;\n  \n  return {\n    statusCode,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify(errorResponse)\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        0
      ],
      "id": "0c1d2e3f-4a5b-6c7d-8e9f-456789012cde",
      "name": "Prepare Response"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, X-API-Key"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1320,
        0
      ],
      "id": "109b1b3e-1c80-44b3-89a5-5c523cf684ea",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Request": {
      "main": [
        [
          {
            "node": "Configure Search Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Search Parameters": {
      "main": [
        [
          {
            "node": "Search HackerNews API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search HackerNews API": {
      "main": [
        [
          {
            "node": "Transform Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Response": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "v2-no-rate-limiting",
  "meta": {
    "instanceId": "92a0fdacd999c0291780e000ee0e5831611937a38c77bda4c332c38b95ff4613"
  },
  "id": "lQiISGzGDAvI8ewZ",
  "tags": []
} 